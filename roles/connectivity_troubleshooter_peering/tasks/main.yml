---
# tasks file for roles/connectivity_troubleshooter_peering_destination

- name: Run cloud.aws_troubleshooting.connectivity_troubleshooter_peering role
  block:
    - name: Fail when next hop type is not supported by this role
      ansible.builtin.fail:
        msg: Next hop type '{{ connectivity_troubleshooter_validate__next_hop }}' is not supported by this role
      when: "'pcx-' not in connectivity_troubleshooter_validate__next_hop"

    - name: Gather information about peering connection
      amazon.aws.ec2_vpc_peering_info:
        filters:
          vpc-peering-connection-id:
            - "{{ connectivity_troubleshooter_validate__next_hop }}"
      register: connectivity_troubleshooter_peering__vpc_peering_connection_info

    - name: Gather information about Network Interface of the destination peer
      amazon.aws.ec2_eni_info:
        filters:
          addresses.private-ip-address: "{{ connectivity_troubleshooter_peering_destination_ip }}"
      register: connectivity_troubleshooter_peering__dst_peer_eni

    - name: Set 'connectivity_troubleshooter_peering__dst_peer_vpc_id' and 'connectivity_troubleshooter_peering__dst_peer_subnet_id' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_peering__dst_peer_vpc_id: "{{ connectivity_troubleshooter_peering__dst_peer_eni_info.vpc_id }}"
        connectivity_troubleshooter_peering__dst_peer_subnet_id: "{{ connectivity_troubleshooter_peering__dst_peer_eni_info.subnet_id }}"
      vars:
        connectivity_troubleshooter_peering__dst_peer_eni_info: "{{ connectivity_troubleshooter_peering__dst_peer_eni.network_interfaces.0 }}"

    - name: Gather information about destination peer subnet
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          association.subnet-id:
            - "{{ connectivity_troubleshooter_peering__dst_peer_subnet_id }}"
      register: connectivity_troubleshooter_peering__dst_peer_route_table

    - name: Set 'connectivity_troubleshooter_validate__routes' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_peering__routes: "{{ connectivity_troubleshooter_peering__dst_peer_route_table.route_tables.0.routes  }}"
      when: connectivity_troubleshooter_peering__dst_peer_route_table.route_tables | length > 0

    # if RouteTable is not returned, this indicates association of subnet with main route table
    - name: Gather information about VPC route table using association.main=true
      when: connectivity_troubleshooter_peering__dst_peer_route_table.route_tables | length == 0
      block:
        - name: Gather information about destination peer subnet
          amazon.aws.ec2_vpc_route_table_info:
            filters:
              association.main: "true"
              vpc-id: "{{ connectivity_troubleshooter_peering__dst_peer_vpc_id }}"
          register: connectivity_troubleshooter_peering__dst_peer_route_table_retry

        - name: Fail when no route table for destination peer is found
          ansible.builtin.fail:
            msg: Could not find route table for Destination peer
          when: connectivity_troubleshooter_peering__dst_peer_route_table_retry.route_tables | length == 0

        - name: Set 'connectivity_troubleshooter_peering__routes' variable
          ansible.builtin.set_fact:
            connectivity_troubleshooter_peering__routes: "{{ connectivity_troubleshooter_peering__dst_peer_route_table_retry.route_tables.0.routes }}"

    - name: Evaluate VPC peering connection
      cloud.aws_troubleshooting.eval_vpc_peering:
        src_ip: "{{ connectivity_troubleshooter_peering_source_ip }}"
        peering_id: "{{ connectivity_troubleshooter_validate__next_hop }}"
        dst_vpc: "{{ connectivity_troubleshooter_peering_destination_vpc }}"
        routes: "{{ connectivity_troubleshooter_peering__routes }}"
        vpc_peering_connection: "{{ connectivity_troubleshooter_peering__vpc_peering_connection_info.vpc_peering_connections.0 }}"
