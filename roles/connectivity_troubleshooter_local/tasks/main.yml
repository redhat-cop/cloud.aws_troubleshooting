---
# tasks file for roles/connectivity_troubleshooter_local

- name: Run 'cloud.aws_troubleshooting.connectivity_troubleshooter_local' role
  block:
    - name: Fail when next hop type is not supported by this role
      ansible.builtin.fail:
        msg: Next hop type '{{ connectivity_troubleshooter_validate__next_hop }}' is not supported by this role
      when: connectivity_troubleshooter_validate__next_hop != 'local'

    - name: Gather information about destination ENI
      amazon.aws.ec2_eni_info:
        filters:
          addresses.private-ip-address: "{{ connectivity_troubleshooter_local_destination_ip }}"
      register: connectivity_troubleshooter_local__describe_dst_eni

    - name: >
        Set 'connectivity_troubleshooter_local__dst_vpc_id', 'connectivity_troubleshooter_local__dst_subnet_id' and
        'connectivity_troubleshooter_local__dst_security_groups' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_local__dst_vpc_id: "{{ connectivity_troubleshooter_local__dst_network_interface_info.vpc_id }}"
        connectivity_troubleshooter_local__dst_subnet_id: "{{ connectivity_troubleshooter_local__dst_network_interface_info.subnet_id }}"
        connectivity_troubleshooter_local__dst_security_groups: >-
          {{ connectivity_troubleshooter_local__dst_network_interface_info.groups | map(attribute='group_id') | list }}
      vars:
        connectivity_troubleshooter_local__dst_network_interface_info: "{{ connectivity_troubleshooter_local__describe_dst_eni.network_interfaces.0 }}"

    - name: Gather information about source ENI
      amazon.aws.ec2_eni_info:
        filters:
          addresses.private-ip-address: "{{ connectivity_troubleshooter_local_source_ip }}"
      register: connectivity_troubleshooter_local__describe_src_eni

    - name: >
        Set 'connectivity_troubleshooter_local__src_vpc_id', 'connectivity_troubleshooter_local__src_subnet_id' and
        'connectivity_troubleshooter_local__src_security_groups' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_local__src_vpc_id: "{{ connectivity_troubleshooter_local__src_network_interface_info.vpc_id }}"
        connectivity_troubleshooter_local__src_subnet_id: "{{ connectivity_troubleshooter_local__src_network_interface_info.subnet_id }}"
        connectivity_troubleshooter_local__src_security_groups: >
          {{ connectivity_troubleshooter_local__src_network_interface_info.groups | map(attribute='group_id') | list }}
      vars:
        connectivity_troubleshooter_local__src_network_interface_info: "{{ connectivity_troubleshooter_local__describe_src_eni.network_interfaces.0 }}"

    - name: Fail when no network interface found
      ansible.builtin.fail:
        msg: Kindly check the connectivity_troubleshooter_local_destination_ip parameter, no network interface found
      when: connectivity_troubleshooter_local__describe_dst_eni['network_interfaces'] | length == 0

    - name: Fail when no route is present towards required destination VPC
      ansible.builtin.fail:
        msg: Kindly check the source route table to ensure a more specific route is present towards required destination VPC
      when: >-
        connectivity_troubleshooter_local_destination_vpc | default('', true) | trim
        and connectivity_troubleshooter_local_destination_vpc != connectivity_troubleshooter_local__dst_vpc_id

    - name: Gather information about source security groups
      amazon.aws.ec2_security_group_info:
        filters:
          group_id: "{{ item }}"
      register: connectivity_troubleshooter_local__src_security_groups_info
      with_items: "{{ connectivity_troubleshooter_local__src_security_groups }}"

    - name: Gather information about destination security group
      amazon.aws.ec2_security_group_info:
        filters:
          group_id: "{{ item }}"
      register: connectivity_troubleshooter_local__dst_security_groups_info
      with_items: "{{ connectivity_troubleshooter_local__dst_security_groups }}"

    - name: Set 'connectivity_troubleshooter_local__src_security_groups_info' and 'connectivity_troubleshooter_local__dst_security_groups_info' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_local__src_security_groups_info: >-
          {{ connectivity_troubleshooter_local__src_security_groups_info.results | sum(attribute='security_groups', start=[]) }}
        connectivity_troubleshooter_local__dst_security_groups_info: >-
          {{ connectivity_troubleshooter_local__dst_security_groups_info.results | sum(attribute='security_groups', start=[]) }}

    - name: Evaluate ingress and egress security group rules
      cloud.aws_troubleshooting.eval_security_groups:
        src_ip: "{{ connectivity_troubleshooter_local_source_ip }}"
        src_security_groups: "{{ connectivity_troubleshooter_local__src_security_groups }}"
        dst_ip: "{{ connectivity_troubleshooter_local_destination_ip }}"
        dst_port: "{{ connectivity_troubleshooter_local_destination_port }}"
        dst_security_groups: "{{ connectivity_troubleshooter_local__dst_security_groups }}"
        security_groups: "{{ connectivity_troubleshooter_local__src_security_groups_info + connectivity_troubleshooter_local__dst_security_groups_info }}"
      register: connectivity_troubleshooter_local__result_eval_security_groups

    - name: Gather information about source subnet network ACLs
      amazon.aws.ec2_vpc_nacl_info:
        filters:
          association.subnet-id:
            - "{{ connectivity_troubleshooter_local__src_subnet_id }}"
      register: connectivity_troubleshooter_local__network_acls_info

    - name: Set 'connectivity_troubleshooter_local__src_network_acls_info' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_local__src_network_acls_info: >-
          {{ connectivity_troubleshooter_local__src_network_acls_info | d([]) + [dict(_keys | zip(_vals))] }}
      loop: "{{ connectivity_troubleshooter_local__network_acls_info.nacls }}"
      vars:
        _keys: "{{ ['egress', 'ingress'] }}"
        _vals: "{{ ['egress', 'ingress'] | map('extract', item) }}"

    - name: Gather information about destination network ACLs
      amazon.aws.ec2_vpc_nacl_info:
        filters:
          association.subnet-id:
            - "{{ connectivity_troubleshooter_local__dst_subnet_id }}"
      register: connectivity_troubleshooter_local__network_acls_info

    - name: Set 'connectivity_troubleshooter_local__dst_network_acls_info' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_local__dst_network_acls_info: >
          "{{ connectivity_troubleshooter_local__dst_network_acls_info
          | d([]) + [dict(connectivity_troubleshooter_local__keys
          | zip(connectivity_troubleshooter_local__vals))] }}"
      loop: "{{ connectivity_troubleshooter_local__network_acls_info.nacls }}"
      vars:
        connectivity_troubleshooter_local__keys: "{{ ['egress', 'ingress'] }}"
        connectivity_troubleshooter_local__vals: "{{ ['egress', 'ingress'] | map('extract', item) }}"

    - name: Evaluate ingress and egress netwok ACLs
      cloud.aws_troubleshooting.eval_network_acls:
        src_ip: "{{ connectivity_troubleshooter_local_source_ip }}"
        src_subnet_id: "{{ connectivity_troubleshooter_local__src_subnet_id }}"
        src_port_range: "{{ connectivity_troubleshooter_local_source_port_range }}"
        dst_ip: "{{ connectivity_troubleshooter_local_destination_ip }}"
        dst_port: "{{ connectivity_troubleshooter_local_destination_port }}"
        dst_subnet_id: "{{ connectivity_troubleshooter_local__dst_subnet_id }}"
        src_network_acls: "{{ connectivity_troubleshooter_local__src_network_acls_info }}"
        dst_network_acls: "{{ connectivity_troubleshooter_local__dst_network_acls_info }}"
      register: connectivity_troubleshooter_local__result_eval_network_acls
