---
# tasks file for roles/connectivity_troubleshooter_nat

- name: Run 'cloud.aws_troubleshooting.connectivity_troubleshooter_nat' role
  block:
    - name: Fail when next hop type is not supported by this role
      ansible.builtin.fail:
        msg: Next hop type '{{ connectivity_troubleshooter_validate__next_hop }}' is not supported by this role
      when: "'nat-' not in connectivity_troubleshooter_validate__next_hop"

    - name: Gather information about NAT gateway
      amazon.aws.ec2_vpc_nat_gateway_info:
        filters:
          nat-gateway-id: "{{ connectivity_troubleshooter_validate__next_hop }}"
      register: connectivity_troubleshooter_nat__describe_nat_gw

    - name: Set 'connectivity_troubleshooter_nat__nat_subnet_id' and 'connectivity_troubleshooter_nat__nat_vpc_id' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_nat__nat_subnet_id: "{{ connectivity_troubleshooter_nat__nat_gw_info.subnet_id }}"
        connectivity_troubleshooter_nat__nat_vpc_id: "{{ connectivity_troubleshooter_nat__nat_gw_info.vpc_id }}"
      vars:
        connectivity_troubleshooter_nat__nat_gw_info: "{{ connectivity_troubleshooter_nat__describe_nat_gw.result.0 }}"

    - name: Gather information about NAT gateway subnet networks ACLs
      amazon.aws.ec2_vpc_nacl_info:
        filters:
          association.subnet-id: "{{ connectivity_troubleshooter_nat__nat_subnet_id }}"
      register: connectivity_troubleshooter_nat__nat_network_acls_info

    - name: Set 'connectivity_troubleshooter_nat__nat_network_acls' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_nat__nat_network_acls: >-
          {{ connectivity_troubleshooter_nat__nat_network_acls
          | d([]) + [dict(connectivity_troubleshooter_nat__keys
          | zip(connectivity_troubleshooter_nat__vals))] }}
      loop: "{{ connectivity_troubleshooter_nat__nat_network_acls_info.nacls }}"
      vars:
        connectivity_troubleshooter_nat__keys: "{{ ['egress', 'ingress'] }}"
        connectivity_troubleshooter_nat__vals: "{{ ['egress', 'ingress'] | map('extract', item) }}"

    - name: Gather information about VPC route table
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          association.subnet-id:
            - "{{ connectivity_troubleshooter_nat__nat_subnet_id }}"
      register: connectivity_troubleshooter_nat__nat_route_table_info

    - name: Set 'connectivity_troubleshooter_nat__nat_routes' variable
      ansible.builtin.set_fact:
        connectivity_troubleshooter_nat__nat_routes: "{{ connectivity_troubleshooter_nat__nat_route_table_info.route_tables.0.routes  }}"
      when: connectivity_troubleshooter_nat__nat_route_table_info.route_tables | length > 0

    # if RouteTable is not returned, this indicates association of subnet with main route table
    - name: Gather information about VPC route table using association.main=true
      when: connectivity_troubleshooter_nat__nat_route_table_info.route_tables | length == 0
      block:
        - name: Gather information about VPC route table
          amazon.aws.ec2_vpc_route_table_info:
            filters:
              association.main: "true"
              vpc-id: "{{ connectivity_troubleshooter_nat__nat_vpc_id }}"
          register: connectivity_troubleshooter_nat__nat_route_table_retry

        - name: Fail when route table for NAT Gateway is found
          ansible.builtin.fail:
            msg: Could not find route table for NAT Gateway
          when: connectivity_troubleshooter_nat__nat_route_table_retry.route_tables | length == 0

        - name: Set 'connectivity_troubleshooter_nat__nat_routes' variable
          ansible.builtin.set_fact:
            connectivity_troubleshooter_nat__nat_routes: "{{ connectivity_troubleshooter_nat__nat_route_table_retry.route_tables.0.routes }}"

    - name: Gather information about NAT subnet network ACLs
      amazon.aws.ec2_vpc_nacl_info:
        filters:
          association.subnet-id:
            - "{{ connectivity_troubleshooter_nat__nat_subnet_id }}"
      register: connectivity_troubleshooter_nat__nat_subnet_nacls_info

    - name: Set 'connectivity_troubleshooter_nat__nat_subnet_nacls' variable
      ansible.legacy.set_fact:
        connectivity_troubleshooter_nat__nat_subnet_nacls: >-
          {{ connectivity_troubleshooter_nat__nat_subnet_nacls
          | d([]) + [dict(connectivity_troubleshooter_nat__keys
          | zip(connectivity_troubleshooter_nat__vals))] }}
      loop: "{{ connectivity_troubleshooter_nat__nat_subnet_nacls_info.nacls }}"
      vars:
        connectivity_troubleshooter_nat__keys: "{{ ['egress', 'ingress'] }}"
        connectivity_troubleshooter_nat__vals: "{{ ['egress', 'ingress'] | map('extract', item) }}"

    - name: Gather information about source ENI
      amazon.aws.ec2_eni_info:
        filters:
          addresses.private-ip-address: "{{ connectivity_troubleshooter_nat_source_ip }}"
      register: connectivity_troubleshooter_nat__describe_src_eni

    - name: >
        Set 'connectivity_troubleshooter_nat__src_vpc_id', 'connectivity_troubleshooter_nat__src_subnet_id' and
        'connectivity_troubleshooter_nat__src_security_groups' variables
      ansible.builtin.set_fact:
        connectivity_troubleshooter_nat__src_vpc_id: "{{ connectivity_troubleshooter_nat__src_network_interface_info.vpc_id }}"
        connectivity_troubleshooter_nat__src_subnet_id: "{{ connectivity_troubleshooter_nat__src_network_interface_info.subnet_id }}"
        connectivity_troubleshooter_nat__src_security_groups: >-
          {{ connectivity_troubleshooter_nat__src_network_interface_info.groups | map(attribute='group_id') | list }}
        connectivity_troubleshooter_nat__src_network_interface: "{{ connectivity_troubleshooter_nat__src_network_interface_info }}"
      vars:
        connectivity_troubleshooter_nat__src_network_interface_info: "{{ connectivity_troubleshooter_nat__describe_src_eni.network_interfaces.0 }}"

    - name: Evaluate ingress and egress NAT netwok ACLs
      cloud.aws_troubleshooting.eval_nat_network_acls:
        src_ip: "{{ connectivity_troubleshooter_nat_source_ip }}"
        src_subnet_id: "{{ connectivity_troubleshooter_nat__src_subnet_id }}"
        src_port_range: "{{ connectivity_troubleshooter_nat_source_port_range }}"
        dst_ip: "{{ connectivity_troubleshooter_nat_destination_ip }}"
        dst_port: "{{ connectivity_troubleshooter_nat_destination_port }}"
        nat_subnet_id: "{{ connectivity_troubleshooter_nat__nat_subnet_id }}"
        nat_network_acls: "{{ connectivity_troubleshooter_nat__nat_subnet_nacls }}"
        routes: "{{ connectivity_troubleshooter_nat__nat_routes }}"
